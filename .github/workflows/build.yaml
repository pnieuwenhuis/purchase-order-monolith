name: Build & publish .NET API service

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: pnieuwenhuis/purchase-order-monolith
  BASE_IMAGE: mcr.microsoft.com/dotnet/runtime-deps:8.0

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x

    - name: Get the version
      run: echo "RELEASE_VERSION=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Unit and Integration Tests
      run: dotnet test --collect "XPlat Code Coverage" --results-directory ./coverage --no-build --verbosity normal --settings coverlet.runsettings

    - name: Merge Code Coverage Reports
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:./coverage/report -reporttypes:"Cobertura;Html"

    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/report/*.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'
    
    - name: Upload Code Coverage Results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-results
        path: coverage/report

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Log in to the Container registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Docker Image
      if: github.ref == 'refs/heads/main'
      run: |
       dotnet publish ./src/Nice.PurchaseOrder.ServiceApp/Nice.PurchaseOrder.ServiceApp.csproj \
        -r linux-x64 \
        -p DebugType=none \
        -p:ContainerRegistry=${{ env.REGISTRY }} \
        -p ContainerBaseImage=${{ env.BASE_IMAGE }} \
        -p:ContainerImageTags='"latest;${{ env.RELEASE_VERSION }}"' \
        -p ContainerRepository=${{ env.IMAGE_NAME }} \
        -p:ContainerPort=5000 \
        /t:PublishContainer

    